name: Build CLI Trigger Binary

on:
  workflow_call:
    inputs:
      tag:
        required: true
        type: string
    secrets:
      GH_PAT:
        required: true

jobs:
  build-linux:
    runs-on: 
       group: Default
       labels: [self-hosted, Linux, bullos]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v5

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends python3-dev gcc python3-requests patchelf ccache
          export PATH="/usr/lib/ccache:$PATH"
          python3 -m pip install --upgrade pip setuptools --break-system-packages
          pip install -r requirements.txt --break-system-packages
          pip install nuitka --break-system-packages

      - name: Build Trigger Binary
        run: |
          nuitka trigger.py \
            --onefile \
            --standalone \
            --output-dir=dist-linux \
            --assume-yes-for-downloads \
            --include-module=_json

      - name: Clean dist-linux folder
        run: |
          rm -rf dist-linux/__pycache__ dist-linux/*.build dist-linux/*.o dist-linux/*.exp dist-linux/*.manifest dist-linux/*.lib dist-linux/*.a dist-linux/*.pdb dist-linux/*.dll

      - name: Upload Linux Artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-build
          path: dist-linux/

  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v5

      - name: Install Python & Nuitka
        run: |
          pip install -r requirements.txt
          pip install nuitka

      - name: Install MinGW if GCC not available
        run: |
          if (-not (Get-Command gcc -ErrorAction SilentlyContinue)) {
            choco install mingw -y
            $env:Path += ";C:\ProgramData\chocolatey\lib\mingw\tools\install\mingw64\bin"
          }

      - name: Build Trigger Binary
        run: |
          nuitka trigger.py `
            --onefile `
            --standalone `
            --output-dir=dist-windows `
            --mingw64 `
            --assume-yes-for-downloads

      - name: Clean dist-windows folder
        run: |
            Remove-Item -Recurse -Force dist-windows\__pycache__ -ErrorAction SilentlyContinue
            Get-ChildItem -Path dist-windows\* -Include *.build,*.o,*.pdb,*.lib,*.exp,*.manifest -Recurse | Remove-Item -Force


      - name: Upload Windows Artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: dist-windows
  release:
    needs: [build-linux, build-windows]
    runs-on: 
       group: Default
       labels: [self-hosted, Linux, X64, bullos]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v5

      - name: Download Linux Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: linux-build
          path: dist-linux

      - name: Download Windows Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: windows-build
          path: dist-windows

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ inputs.tag }}
          name: "Release ${{ inputs.tag }}"
          files: |
            dist-linux/*
            dist-windows/*
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
